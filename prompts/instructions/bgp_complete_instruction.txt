------Instruction:-------------
*** Configuration format ***:
The configuration for each node should start with Configuration of {node_name}:

*** Interface configuration *** :
For a Node A in target topology T1:
1. Parse interface information
1) Extract Loopback Interface Information:
Retrieve the name and IP address(es) of Node A’s loopback interface from the provided node information in target topology T1.
2) Extract Physical Interface Information:
For each edge connected to Node A in topology T1:
If Node1 in the edge is Node A:
• Use node1's interface name and IP information
If Node2 in the edge is Node A:
• Use node2's interface name and IP information
2. Generate the configuration for all interfaces using exact interface names and IPs from the topology data. Note: for each interface, you should set neighbor description in format: description "To {neighbor_node_name}".


*** Route-map configuration ***:
1. For a node A in the target topology T1, first find the node B in example topology T2 that matches this node from the matching relationship list provided above.
2. Then, find the configuration of the matched node B. Based on the configuration of the matched node B, infer the configuration of node A regarding its each neighbor."

Format requirements for the route-map policy configuration of a node is :
Naming Convention:
Import Route-Map: RMap_{node}_from_{neighbor}
Export Route-Map: RMap_{node}_to_{neighbor}
Replace {node} and {neighbor} with actual node name and its neighbor name (no placeholders like ANY).

Configuration Structure:
!
route-map {rmap_name} {permit|deny} {sequence_number}
match {match_type} {predefined_match_id}
set {set_type} {set_value}
!

OR (empty clause):
!
route-map {rmap_name} {permit|deny} {sequence_number}
!

Rules:
1. If a route-map contains a match statement, you must first define the match conditions. Supported match types include:
1) community (community-list)
All match statements must reference the predefined conditions.
2. {match_id} must be an integer only (e.g., 1, 10; not 100:0).
3. Separate route-maps for different neighbors with !.


*** BGP basic configuration ***:
For a Node A in the target topology T1:
1. Parse the AS and neighbor information
1) Extract the AS number for the Node A and its neighbors from the node information provided in target topology T1.
2) Extract IP address of Node A's neighbors from the edge information provided in the target topology T1.
For each edge connected to Node A in topology T1:
If node1 in the edge is Node A:
• node2 is a neighbor of Node A, so you should use node2's IP information
If node2 in the edge is Node A:
• node1 is a neighbor of Node A, so you should use node1's IP information
2. Generate full BGP configuration based on the neighbor's' IP addresses, AS, and route-map policy configuration. If the node uses the community tags to control routing decisions, the bgp configuration should includes send-community configuration for each neighbor. Note: You must guarantee that the ip address and AS of the neighbor is correct in the generated configuration.
--------------------------------